const { ethers } = require("ethers");
const path = require("path");
const fs = require("fs");

// Load environment config
const { ETHEREUM_RPC_URL, PRIVATE_KEY } = require("../config");

// Path to contracts.json (auto-generated by Hardhat deploy script)
const contractsPath = path.join(__dirname, "..", "Smart Contracts", "contracts.json");

let addresses = {};
try {
  if (fs.existsSync(contractsPath)) {
    addresses = JSON.parse(fs.readFileSync(contractsPath, "utf8"));
  } else {
    console.warn(`[WARN] contracts.json not found at: ${contractsPath}`);
  }
} catch (err) {
  console.error("[ERROR] Failed to load contracts.json:", err.message);
}

// Load ABIs from Hardhat artifacts
const userManagementABI = require("../../Smart Contracts/artifacts/contracts/UserManagement.sol/UserManagement.json").abi;
const drugSupplyChainABI = require("../../Smart Contracts/artifacts/contracts/DrugSupplyChain.sol/DrugSupplyChain.json").abi;
const prescriptionABI = require("../../Smart Contracts/artifacts/contracts/Prescription.sol/Prescription.json").abi;
const regulatorOversightABI = require("../../Smart Contracts/artifacts/contracts/RegulatorOversight.sol/RegulatorOversight.json").abi;

// Setup provider
const provider = new ethers.JsonRpcProvider(ETHEREUM_RPC_URL);

// If PRIVATE_KEY exists, use signer, otherwise fallback to read-only provider
const signer = PRIVATE_KEY ? new ethers.Wallet(PRIVATE_KEY, provider) : provider;

// Initialize contract instances
const contracts = {
  userManagement: addresses.USER_MANAGEMENT_ADDRESS
    ? new ethers.Contract(addresses.USER_MANAGEMENT_ADDRESS, userManagementABI, signer)
    : null,
  drugSupplyChain: addresses.DRUG_SUPPLY_CHAIN_ADDRESS
    ? new ethers.Contract(addresses.DRUG_SUPPLY_CHAIN_ADDRESS, drugSupplyChainABI, signer)
    : null,
  prescription: addresses.PRESCRIPTION_ADDRESS
    ? new ethers.Contract(addresses.PRESCRIPTION_ADDRESS, prescriptionABI, signer)
    : null,
  regulatorOversight: addresses.REGULATOR_OVERSIGHT_ADDRESS
    ? new ethers.Contract(addresses.REGULATOR_OVERSIGHT_ADDRESS, regulatorOversightABI, signer)
    : null,
};

module.exports = contracts;
