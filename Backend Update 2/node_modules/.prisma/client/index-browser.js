
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  wallet: 'wallet',
  email: 'email',
  passwordhash: 'passwordhash',
  roleid: 'roleid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  licenseno: 'licenseno',
  hospital: 'hospital'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  dateofbirth: 'dateofbirth'
};

exports.Prisma.PharmacistScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  licenseno: 'licenseno',
  pharmacy: 'pharmacy'
};

exports.Prisma.ManufacturerScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  companyname: 'companyname'
};

exports.Prisma.DistributorScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  companyname: 'companyname'
};

exports.Prisma.RegulatorScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  agencyname: 'agencyname'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userid: 'userid'
};

exports.Prisma.DrugScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  formulation: 'formulation',
  dosageunit: 'dosageunit'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientid: 'patientid',
  doctorid: 'doctorid',
  drugid: 'drugid',
  dosage: 'dosage',
  issuedat: 'issuedat',
  expiresat: 'expiresat',
  blockchaintx: 'blockchaintx',
  qrcode: 'qrcode',
  ipfshash: 'ipfshash',
  status: 'status'
};

exports.Prisma.DrugBatchScalarFieldEnum = {
  id: 'id',
  manufacturerid: 'manufacturerid',
  drugid: 'drugid',
  batchnumber: 'batchnumber',
  manufacturedate: 'manufacturedate',
  expirydate: 'expirydate',
  blockchaintx: 'blockchaintx',
  qrcode: 'qrcode',
  ipfshash: 'ipfshash'
};

exports.Prisma.SupplyChainRecordScalarFieldEnum = {
  id: 'id',
  drugbatchid: 'drugbatchid',
  fromentityid: 'fromentityid',
  toentityid: 'toentityid',
  action: 'action',
  timestamp: 'timestamp',
  blockchaintx: 'blockchaintx'
};

exports.Prisma.RevocationRecordScalarFieldEnum = {
  id: 'id',
  type: 'type',
  refid: 'refid',
  reason: 'reason',
  revokedbyid: 'revokedbyid',
  timestamp: 'timestamp',
  blockchaintx: 'blockchaintx'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  code: 'code',
  expiresat: 'expiresat',
  createdat: 'createdat'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  title: 'title',
  message: 'message',
  isread: 'isread',
  priority: 'priority',
  createdat: 'createdat'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  reporttype: 'reporttype',
  filters: 'filters',
  generatedat: 'generatedat',
  ipfshash: 'ipfshash'
};

exports.Prisma.DispenseRecordScalarFieldEnum = {
  id: 'id',
  prescriptionid: 'prescriptionid',
  pharmacistid: 'pharmacistid',
  drugbatchid: 'drugbatchid',
  quantity: 'quantity',
  dispensedat: 'dispensedat',
  blockchaintx: 'blockchaintx'
};

exports.Prisma.BlockchainEventLogScalarFieldEnum = {
  id: 'id',
  eventname: 'eventname',
  contractname: 'contractname',
  entityid: 'entityid',
  entitytype: 'entitytype',
  transactionhash: 'transactionhash',
  timestamp: 'timestamp',
  processed: 'processed'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Role: 'Role',
  User: 'User',
  Permission: 'Permission',
  Doctor: 'Doctor',
  Patient: 'Patient',
  Pharmacist: 'Pharmacist',
  Manufacturer: 'Manufacturer',
  Distributor: 'Distributor',
  Regulator: 'Regulator',
  Admin: 'Admin',
  Drug: 'Drug',
  Prescription: 'Prescription',
  DrugBatch: 'DrugBatch',
  SupplyChainRecord: 'SupplyChainRecord',
  RevocationRecord: 'RevocationRecord',
  Otp: 'Otp',
  Alert: 'Alert',
  ActivityLog: 'ActivityLog',
  Report: 'Report',
  DispenseRecord: 'DispenseRecord',
  BlockchainEventLog: 'BlockchainEventLog'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
